#!/usr/bin/python3

import re
import os
import sys
import json
import subprocess
import urllib.request
import shutil
import tarfile
import platform
from http import HTTPStatus




dirPath = ""
if len(sys.argv) == 1:
	print("Must provide a path", file=sys.stderr)
	exit(1)
elif len(sys.argv) == 2:
	dirPath = sys.argv[1]
else:
	print("Wrong number of arguments", file=sys.stderr)
	exit(1)

if not os.path.isdir(dirPath):
	print("'%s' is not a valid directory" % dirPath, file=sys.stderr)
	exit(1)

archivePath = dirPath + "/archive.tar.gz"
print(dirPath, file=sys.stderr)
print("hello", file=sys.stderr)


def getArchType() -> str:
	aliases = {
			"x86_64": "386",
			"aarch64": "arm64"
			}
	return aliases[platform.machine()]


def getLatestRelease() -> json:
	url="https://api.github.com/repos/AdguardTeam/dnsproxy/releases/latest"

	req = urllib.request.Request(url, headers={"Accept": "application/vnd.github+json"}, method="GET")
	with urllib.request.urlopen(req) as f:
		if not f.status == HTTPStatus.OK:
			raise Errror("Could not retrieve data")
		stringRes = f.read().decode('utf-8')
		return json.loads(stringRes)
	return json.loads(stringRes)


def getAssetWithNamePattern(pattern, obj: json) -> json: 
	for e in obj:
		if re.match(pattern, e["name"]): 
			return e

def writeToFile(path: str, content): 
	with open(path, "w+b") as file:
		file.write(content)

def downloadFile(url: str, filePath: str):
	#https://stackoverflow.com/a/15035466
	with urllib.request.urlopen(url) as remote, open(filePath, "wb") as file:
		shutil.copyfileobj(remote, file)


# https://docs.python.org/3/library/tarfile.html#tar-examples
def yieldMatchingMembers(members, pattern):
	for m in members:
		if re.match(pattern, m.name):
			print(m.name, file=sys.stderr)
			yield m

def concatPathNames(pathOne: str, pathTwo: str) -> str:
	#matchRes = re.match("(?<=^\.\/).*", str(pathTwo))
	return pathOne + "/" + pathTwo

def extractArchive(archivePath, memberName, outputPath):
	with tarfile.open(archivePath) as archive:
		memberGenerator = yieldMatchingMembers(archive.getmembers(), "^.*\/" + re.escape(memberName) + "$")
		#archive.extractall(path=outputPath, members=memberGenerator)
		member = next(memberGenerator)
		archive.extract(member, path=outputPath)
		return concatPathNames(outputPath, member.name)


release = getLatestRelease()

latestAsset = getAssetWithNamePattern(r"^dnsproxy-linux-" + re.escape(getArchType()) + "-v[\d.]*\.tar\.gz$", release["assets"])
downloadUrl = latestAsset["browser_download_url"]


downloadFile(downloadUrl, archivePath)

outputFileName = "dnsproxy"
outputFilePath = dirPath + "/" + outputFileName

extractedFile = extractArchive(archivePath, outputFileName, dirPath)
print(extractedFile)
